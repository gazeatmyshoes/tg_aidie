import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CallbackContext
from google.cloud import language_v1
from google.api_core.exceptions import InvalidArgument
from .firebase_manager import FirebaseManager
from .speech_to_text import transcribe_audio
from .config import MAX_AUDIO_DURATION

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data='new_entry')],
        [InlineKeyboardButton("üéØ –ú–æ–∏ —Ü–µ–ª–∏", callback_data='goals')],
        [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", callback_data='mood_analysis')]
    ])

def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø AI-–î–Ω–µ–≤–Ω–∏–∫ –±–æ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å "
        "—Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ "
        "—Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "üî• <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</b>:\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫ (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)\n"
        "‚Ä¢ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–π\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode=ParseMode.HTML
    )

def analyze_text_sentiment(text: str) -> tuple:
    """
    –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Google Natural Language API

    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

    Returns:
        tuple: (sentiment_score, sentiment_magnitude)
    """
    try:
        logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
        logger.debug(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:100]}...")

        client = language_v1.LanguageServiceClient()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        try:
            document = language_v1.Document(
                content=text,
                type_=language_v1.Document.Type.PLAIN_TEXT,
                language='ru'
            )
            sentiment = client.analyze_sentiment(
                request={'document': document}
            ).document_sentiment
            return sentiment.score, sentiment.magnitude
        except InvalidArgument:
            # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            from google.cloud import translate_v2 as translate
            translate_client = translate.Client()
            translation = translate_client.translate(
                text,
                target_language='en',
                source_language='ru'
            )
            translated_text = translation['translatedText']
            
            document = language_v1.Document(
                content=translated_text,
                type_=language_v1.Document.Type.PLAIN_TEXT,
                language='en'
            )
            sentiment = client.analyze_sentiment(
                request={'document': document}
            ).document_sentiment
            return sentiment.score, sentiment.magnitude

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}", exc_info=True)
        return 0, 0
    """
    –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Google Natural Language API
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        tuple: (sentiment_score, sentiment_magnitude)
    """
    try:
        logger.info("–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞")
        logger.debug(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:100]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloud Translation API –≤–º–µ—Å—Ç–æ googletrans
        from google.cloud import translate_v2 as translate
        translate_client = translate.Client()
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        logger.info("–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
        translation = translate_client.translate(
            text,
            target_language='en',
            source_language='ru'
        )
        
        translated_text = translation['translatedText']
        logger.debug(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {translated_text[:100]}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        logger.info("–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        client = language_v1.LanguageServiceClient()
        document = language_v1.Document(
            content=translated_text,
            type_=language_v1.Document.Type.PLAIN_TEXT,
            language='en'
        )
        
        sentiment = client.analyze_sentiment(
            request={'document': document}
        ).document_sentiment
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞: score={sentiment.score:.2f}, magnitude={sentiment.magnitude:.2f}")
        return sentiment.score, sentiment.magnitude
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}", exc_info=True)
        return 0, 0

def get_mood_emoji(score: float) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    if score >= 0.5:
        return "üòä"
    elif score >= 0.1:
        return "üôÇ"
    elif score > -0.1:
        return "üòê"
    elif score > -0.5:
        return "üòï"
    else:
        return "üò¢"

def save_diary_entry(user_id: int, text: str, sentiment_score: float, 
                    sentiment_magnitude: float) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫"""
    return FirebaseManager.save_diary_entry(
        user_id, text, sentiment_score, sentiment_magnitude
    )

def handle_text_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {text[:50]}...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –Ω–æ–≤—É—é —Ü–µ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if context.user_data.get('waiting_for_goal'):
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            if FirebaseManager.add_goal(user.id, text):
                response = "‚úÖ –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            else:
                response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏."
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ü–µ–ª–∏
            context.user_data['waiting_for_goal'] = False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
            goals = FirebaseManager.get_goals(user.id)
            if goals:
                response += "\n\nüéØ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏</b>:\n\n"
                for i, goal in enumerate(goals, 1):
                    status = "‚úÖ" if goal.get('completed') else "üî≤"
                    response += f"{status} {i}. {goal['text']}\n"
            
            update.message.reply_text(
                response,
                parse_mode=ParseMode.HTML,
                reply_markup=get_main_keyboard()
            )
            return

        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        score, magnitude = analyze_text_sentiment(text)
        mood_emoji = get_mood_emoji(score)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        if save_diary_entry(user.id, text, score, magnitude):
            response = (
                f"{mood_emoji} –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
                f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:\n"
                f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {score:.2f}\n"
                f"‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {magnitude:.2f}\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
            )
        else:
            response = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏."
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        update.message.reply_text(response, reply_markup=get_main_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        update.message.reply_text(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )

def handle_callback_query(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user = query.from_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback-–∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {query.data}")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        query.answer()

        if query.data == 'new_entry':
            text = (
                "üìù <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                "–∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."
            )
            query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                ]])
            )

        elif query.data == 'goals':
            goals = get_user_goals(user.id)
            if goals:
                text = "üéØ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏</b>:\n\n"
                for i, goal in enumerate(goals, 1):
                    status = "‚úÖ" if goal.get('completed') else "üî≤"
                    text += f"{status} {i}. {goal['text']}\n"
            else:
                text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π."
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data='add_goal')],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
            ]
            query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif query.data == 'mood_analysis':
            mood_stats = analyze_user_mood_history(user.id)
            if mood_stats:
                text = (
                    "üìä <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</b>\n\n"
                    f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {mood_stats['avg_score']:.2f}\n"
                    f"‚Ä¢ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_stats['dominant_mood']}\n"
                    f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {mood_stats['entries_count']}\n\n"
                    f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {mood_stats['recommendation']}"
                )
            else:
                text = (
                    "üìä <b>–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. "
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É."
                )

            query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_menu')
                ]])
            )

        elif query.data == 'back_to_menu':
            text = (
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )
            query.edit_message_text(
                text,
                reply_markup=get_main_keyboard()
            )

        elif query.data == 'add_goal':
            context.user_data['waiting_for_goal'] = True
            text = (
                "üéØ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞—à–µ–π —Ü–µ–ª–∏."
            )
            query.edit_message_text(
                text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data='back_to_menu')
                ]])
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {user.id}: {str(e)}")
        try:
            query.edit_message_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
        except Exception:
            pass

def get_user_goals(user_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return FirebaseManager.get_goals(user_id)

def analyze_user_mood_history(user_id: int) -> dict:
    """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    entries = FirebaseManager.get_mood_history(user_id)
    if not entries:
        return None

    scores = [entry['sentiment_score'] for entry in entries]
    avg_score = sum(scores) / len(scores)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    if avg_score >= 0.5:
        dominant_mood = "–û—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üòä"
        recommendation = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º!"
    elif avg_score >= 0.1:
        dominant_mood = "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ üôÇ"
        recommendation = "–•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ó–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º."
    elif avg_score > -0.1:
        dominant_mood = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ üòê"
        recommendation = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏—è—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–Ω—è."
    elif avg_score > -0.5:
        dominant_mood = "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ üòï"
        recommendation = "–ó–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏."
    else:
        dominant_mood = "–û—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ üò¢"
        recommendation = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–ª–∏–∑–∫–∏–º–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."

    return {
        'avg_score': avg_score,
        'dominant_mood': dominant_mood,
        'entries_count': len(entries),
        'recommendation': recommendation
    }

def handle_voice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        duration = update.message.voice.duration
        if duration > MAX_AUDIO_DURATION:
            logger.warning(f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {duration}—Å")
            update.message.reply_text(
                f"‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_AUDIO_DURATION} —Å–µ–∫—É–Ω–¥.",
                reply_markup=get_main_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        temp_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'temp')
        os.makedirs(temp_dir, exist_ok=True)
        file_path = os.path.join(temp_dir, f"voice_{user.id}_{int(datetime.now().timestamp())}.ogg")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        file = context.bot.get_file(update.message.voice.file_id)
        file.download(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = update.message.reply_text(
            "üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        text = transcribe_audio(file_path)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(file_path):
            os.remove(file_path)

        if not text:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            processing_message.edit_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        logger.info(f"–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        score, magnitude = analyze_text_sentiment(text)
        mood_emoji = get_mood_emoji(score)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        if save_diary_entry(user.id, text, score, magnitude):
            response = (
                f"‚ú® –í–æ—Ç —á—Ç–æ —è —Ä–∞—Å–ø–æ–∑–Ω–∞–ª:\n\n"
                f"{text}\n\n"
                f"{mood_emoji} –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n\n"
                f"üìä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:\n"
                f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {score:.2f}\n"
                f"‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {magnitude:.2f}"
            )
        else:
            response = (
                f"‚ú® –í–æ—Ç —á—Ç–æ —è —Ä–∞—Å–ø–æ–∑–Ω–∞–ª:\n\n"
                f"{text}\n\n"
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏."
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        processing_message.edit_text(response, reply_markup=get_main_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id}: {str(e)}")
        if 'processing_message' in locals():
            processing_message.edit_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
        else:
            update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )