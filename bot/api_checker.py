import os
import json
import logging
import subprocess
import requests
import firebase_admin
from firebase_admin import credentials, db
from google.cloud import speech_v1p1beta1 as speech
from google.cloud import language_v1
from typing import Tuple, List

logger = logging.getLogger(__name__)

class APIChecker:
    def __init__(self):
        self.errors: List[str] = []
        
    def check_telegram_api(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot API"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot API...")
            response = requests.post(f"https://api.telegram.org/bot{token}/getMe")
            if response.status_code != 200:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.text}"
                self.errors.append(error_msg)
                logger.error(error_msg)
                return False
                
            bot_info = response.json()
            logger.info(f"‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info['result']['username']}")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram API: {str(e)}"
            self.errors.append(error_msg)
            logger.error(error_msg)
            return False

    def check_google_cloud(self, credentials_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cloud API"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cloud API...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if not os.path.exists(credentials_path):
                error_msg = f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google Cloud –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}"
                self.errors.append(error_msg)
                logger.error(error_msg)
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Speech-to-Text API
            speech_client = speech.SpeechClient()
            logger.info("‚úÖ Speech-to-Text API —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Natural Language API
            language_client = language_v1.LanguageServiceClient()
            logger.info("‚úÖ Natural Language API —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")

            return True

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Google Cloud API: {str(e)}"
            self.errors.append(error_msg)
            logger.error(error_msg)
            return False

    def check_firebase(self, credentials_path: str, database_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase API"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase API...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if not os.path.exists(credentials_path):
                error_msg = f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Firebase –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}"
                self.errors.append(error_msg)
                logger.error(error_msg)
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
            cred = credentials.Certificate(credentials_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            try:
                firebase_admin.get_app()
            except ValueError:
                firebase_admin.initialize_app(cred, {
                    'databaseURL': database_url
                })

            # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            ref = db.reference('test')
            test_data = {'message': 'API Check', 'timestamp': str(os.path.getmtime(credentials_path))}
            ref.set(test_data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            read_data = ref.get()
            if read_data != test_data:
                error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è Firebase"
                self.errors.append(error_msg)
                logger.error(error_msg)
                return False

            logger.info("‚úÖ Firebase —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Firebase API: {str(e)}"
            self.errors.append(error_msg)
            logger.error(error_msg)
            return False

    def check_all_apis(self, config: dict) -> Tuple[bool, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö API"""
        self.errors = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ API
            telegram_ok = self.check_telegram_api(config['TELEGRAM_BOT_TOKEN'])
            google_ok = self.check_google_cloud(config['GOOGLE_APPLICATION_CREDENTIALS'])
            firebase_ok = self.check_firebase(
                config['FIREBASE_CREDENTIALS_PATH'],
                config['FIREBASE_DATABASE_URL']
            )

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
            if telegram_ok and google_ok and firebase_ok:
                logger.info("‚úÖ –í—Å–µ API —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
                return True, []
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            return False, self.errors

        except Exception as e:
            error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: {str(e)}"
            self.errors.append(error_msg)
            logger.error(error_msg)
            return False, self.errors

def format_error_message(errors: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    message = "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API:\n\n"
    for i, error in enumerate(errors, 1):
        message += f"{i}. {error}\n"
    message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    return message